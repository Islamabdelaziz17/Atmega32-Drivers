/*********************************
SPI Interface File
*********************************/
#include "Std_Types.h"

#ifndef SPI_H
#define SPI_H

#define SPI_MODE_MASTER_RISINGEDGE_SAMPLE_MSBFIRST_1XSPEED	0x50
#define SPI_MODE_MASTER_RISINGEDGE_SAMPLE_MSBFIRST_2XSPEED	0b01010001
#define SPI_MODE_MASTER_RISINGEDGE_SAMPLE_LSBFIRST_1XSPEED	0b01110000
#define SPI_MODE_MASTER_RISINGEDGE_SAMPLE_LSBFIRST_2XSPEED	0b01110001

#define SPI_MODE_MASTER_RISINGEDGE_SETUP_MSBFIRST_1XSPEED	0b01010100
#define SPI_MODE_MASTER_RISINGEDGE_SETUP_MSBFIRST_2XSPEED	0b01010101
#define SPI_MODE_MASTER_RISINGEDGE_SETUP_LSBFIRST_1XSPEED	0b01110100
#define SPI_MODE_MASTER_RISINGEDGE_SETUP_LSBFIRST_2XSPEED	0b01110101

#define SPI_MODE_MASTER_FALINGEDGE_SAMPLE_MSBFIRST_1XSPEED  0b01011000
#define SPI_MODE_MASTER_FALINGEDGE_SAMPLE_MSBFIRST_2XSPEED	0b01011001
#define SPI_MODE_MASTER_FALINGEDGE_SAMPLE_LSBFIRST_1XSPEED	0b01111000
#define SPI_MODE_MASTER_FALINGEDGE_SAMPLE_LSBFIRST_2XSPEED	0b01111001

#define SPI_MODE_MASTER_FALINGEDGE_SETUP_MSBFIRST_1XSPEED	0b01011100
#define SPI_MODE_MASTER_FALINGEDGE_SETUP_MSBFIRST_2XSPEED	0b01011101
#define SPI_MODE_MASTER_FALINGEDGE_SETUP_LSBFIRST_1XSPEED	0b01111100
#define SPI_MODE_MASTER_FALINGEDGE_SETUP_LSBFIRST_2XSPEED	0b01111101

#define SPI_MODE_SLAVE_MSBFIRST_1XSPEED	0b01000000
#define SPI_MODE_SLAVE_MSBFIRST_2XSPEED	0b01000001
#define SPI_MODE_SLAVE_LSBFIRST_1XSPEED	0b01100000
#define SPI_MODE_SLAVE_LSBFIRST_2XSPEED	0b01100001

#define SPI_CLOCK_PRESCALER_2	4
#define SPI_CLOCK_PRESCALER_4	0
#define SPI_CLOCK_PRESCALER_8	5
#define SPI_CLOCK_PRESCALER_16	1
#define SPI_CLOCK_PRESCALER_32	6
#define SPI_CLOCK_PRESCALER_64	7
#define SPI_CLOCK_PRESCALER_128 3

typedef void(*SPI_Cbf)(void);


typedef struct
{
	
	u8 SPI_Mode;
	u8 SPI_ClockRate;
	
}SPI_Cfg_t;


typedef enum 
{
	SPI_enuOK,
	SPI_enuNOK,
	SPI_enuNULLPTR,
	SPI_enuSPI_DONE,
	SPI_enuSPI_NOTDONE
	
}SPI_enuErrorStatus_t;

typedef enum
{
	SPI_enuIdle,
	SPI_enuBusy
	
}SPI_enuReqStatus_t;

typedef struct  
{
	u8* buffer;
	u32 Size;
	u32 Idx;
	SPI_enuReqStatus_t Status;
	SPI_Cbf NotifyCbf;
}SPI_Req_t;

static SPI_Req_t Global_SPI_strSendReqHandler,Global_SPI_strRecvReqHandler;

void SPI_vidEnableInterrupt();

SPI_enuErrorStatus_t SPI_enuInit(SPI_Cfg_t* Cpy_strCfg);

SPI_enuErrorStatus_t SPI_enuIs_Done();

SPI_enuErrorStatus_t SPI_enuSendmsgAsyncZerocopy(u8* Add_pu8Msg, u32 Cpy_u8Size,SPI_Cbf add_pvidCbf);

SPI_enuErrorStatus_t SPI_enuRecvmsgAsync(u8* Add_pu8Msg, u32 Cpy_u8Size,SPI_Cbf add_pvidCbf);


#endif /*SPI_H*/
